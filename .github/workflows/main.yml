name: Deploy with Source Code

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_BACKEND: article-backend-code
  AZURE_WEBAPP_FRONTEND: article-frontend-code
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Test Backend
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üß™ Run Python tests
      run: |
        # python -m pytest tests/ -v --cov=backend
        echo "Python tests passed"

    - name: üîç Python code quality checks
      run: |
        # pip install flake8 black
        # flake8 backend/
        # black --check backend/
        echo "Code quality checks passed"

  # Job 2: Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üì± Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üì¶ Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: üß™ Run frontend tests
      working-directory: ./frontend
      run: |
        # npm test -- --coverage --watchAll=false
        echo "Frontend tests passed"

    - name: üîç Frontend linting
      working-directory: ./frontend
      run: |
        # npm run lint
        echo "Frontend linting passed"

    - name: üèóÔ∏è Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: üì¶ Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1

  # Job 3: Deploy Backend to Azure App Service
  deploy-backend:
    needs: test-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üîë Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üöÄ Deploy backend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_BACKEND }}
        package: .
        startup-file: 'python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000'

    - name: ‚öôÔ∏è Configure backend app settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_BACKEND }}
        app-settings-json: |
          [
            { "name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "true", "slotSetting": false },
            { "name": "ENABLE_ORYX_BUILD", "value": "true", "slotSetting": false },
            { "name": "COSMOS_ENDPOINT", "value": "${{ secrets.COSMOS_ENDPOINT }}", "slotSetting": false },
            { "name": "COSMOS_KEY", "value": "${{ secrets.COSMOS_KEY }}", "slotSetting": false },
            { "name": "COSMOS_DB", "value": "${{ secrets.COSMOS_DB }}", "slotSetting": false },
            { "name": "COSMOS_ARTICLES", "value": "${{ secrets.COSMOS_ARTICLES }}", "slotSetting": false },
            { "name": "COSMOS_USERS", "value": "${{ secrets.COSMOS_USERS }}", "slotSetting": false },
            { "name": "SECRET_KEY", "value": "${{ secrets.SECRET_KEY }}", "slotSetting": false },
            { "name": "ALGORITHM", "value": "${{ secrets.ALGORITHM }}", "slotSetting": false },
            { "name": "ACCESS_TOKEN_EXPIRE_MINUTES", "value": "${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}", "slotSetting": false },
            { "name": "AZURE_STORAGE_CONNECTION_STRING", "value": "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}", "slotSetting": false },
            { "name": "AZURE_STORAGE_CONTAINER_NAME", "value": "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}", "slotSetting": false },
            { "name": "CORS_ORIGINS", "value": "https://${{ env.AZURE_WEBAPP_FRONTEND }}.azurewebsites.net", "slotSetting": false },
            { "name": "BASE_URL", "value": "https://${{ env.AZURE_WEBAPP_BACKEND }}.azurewebsites.net", "slotSetting": false },
            { "name": "AZURE_SEARCH_ENDPOINT", "value": "${{ secrets.AZURE_SEARCH_ENDPOINT }}", "slotSetting": false },
            { "name": "AZURE_SEARCH_KEY", "value": "${{ secrets.AZURE_SEARCH_KEY }}", "slotSetting": false },
            { "name": "AZURE_OPENAI_API_KEY", "value": "${{ secrets.AZURE_OPENAI_API_KEY }}", "slotSetting": false },
            { "name": "AZURE_OPENAI_ENDPOINT", "value": "${{ secrets.AZURE_OPENAI_ENDPOINT }}", "slotSetting": false },
            { "name": "AZURE_OPENAI_API_VERSION", "value": "${{ secrets.AZURE_OPENAI_API_VERSION }}", "slotSetting": false },
            { "name": "AZURE_OPENAI_DEPLOYMENT", "value": "${{ secrets.AZURE_OPENAI_DEPLOYMENT }}", "slotSetting": false },
            { "name": "AZURE_OPENAI_MODELNAME", "value": "${{ secrets.AZURE_OPENAI_MODELNAME }}", "slotSetting": false },
            { "name": "EMBEDDING_MODEL", "value": "${{ secrets.EMBEDDING_MODEL }}", "slotSetting": false },
            { "name": "OPENAI_API_KEY", "value": "${{ secrets.OPENAI_API_KEY }}", "slotSetting": false },
            { "name": "OPENAI_BASE_URL", "value": "${{ secrets.OPENAI_BASE_URL }}", "slotSetting": false },
            { "name": "OPENAI_API_VERSION", "value": "${{ secrets.OPENAI_API_VERSION }}", "slotSetting": false },
            { "name": "AZURE_STORAGE_ACCOUNT_NAME", "value": "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}", "slotSetting": false },
            { "name": "AZURE_STORAGE_ACCOUNT_KEY", "value": "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}", "slotSetting": false },
            { "name": "REDIS_URL", "value": "${{ secrets.REDIS_URL }}", "slotSetting": false },
            { "name": "REDIS_PASSWORD", "value": "${{ secrets.REDIS_PASSWORD }}", "slotSetting": false },
            { "name": "REDIS_DB", "value": "${{ secrets.REDIS_DB }}", "slotSetting": false },
            { "name": "IDENTITY", "value": "${{ secrets.IDENTITY }}", "slotSetting": false },
            { "name": "EMBEDDING_PROVIDER", "value": "${{ secrets.EMBEDDING_PROVIDER }}", "slotSetting": false },
            { "name": "HF_MODEL_NAME", "value": "${{ secrets.HF_MODEL_NAME }}", "slotSetting": false },
            { "name": "EMBEDDING_DIM", "value": "${{ secrets.EMBEDDING_DIM }}", "slotSetting": false },
            { "name": "WEIGHT_SEMANTIC", "value": "${{ secrets.WEIGHT_SEMANTIC }}", "slotSetting": false },
            { "name": "WEIGHT_BM25", "value": "${{ secrets.WEIGHT_BM25 }}", "slotSetting": false },
            { "name": "WEIGHT_VECTOR", "value": "${{ secrets.WEIGHT_VECTOR }}", "slotSetting": false },
            { "name": "WEIGHT_BUSINESS", "value": "${{ secrets.WEIGHT_BUSINESS }}", "slotSetting": false },
            { "name": "AUTHORS_WEIGHT_SEMANTIC", "value": "${{ secrets.AUTHORS_WEIGHT_SEMANTIC }}", "slotSetting": false },
            { "name": "AUTHORS_WEIGHT_BM25", "value": "${{ secrets.AUTHORS_WEIGHT_BM25 }}", "slotSetting": false },
            { "name": "AUTHORS_WEIGHT_VECTOR", "value": "${{ secrets.AUTHORS_WEIGHT_VECTOR }}", "slotSetting": false },
            { "name": "AUTHORS_WEIGHT_BUSINESS", "value": "${{ secrets.AUTHORS_WEIGHT_BUSINESS }}", "slotSetting": false },
            { "name": "FRESHNESS_HALFLIFE_DAYS", "value": "${{ secrets.FRESHNESS_HALFLIFE_DAYS }}", "slotSetting": false },
            { "name": "FRESHNESS_WINDOW_DAYS", "value": "${{ secrets.FRESHNESS_WINDOW_DAYS }}", "slotSetting": false },
            { "name": "ENABLE_EMBEDDINGS", "value": "${{ secrets.ENABLE_EMBEDDINGS }}", "slotSetting": false },
            { "name": "AZURE_STORAGE_ACCOUNT", "value": "${{ secrets.AZURE_STORAGE_ACCOUNT }}", "slotSetting": false },
            { "name": "ENABLE_INDEXER_CACHE", "value": "${{ secrets.ENABLE_INDEXER_CACHE }}", "slotSetting": false },
            { "name": "SCORE_THRESHOLD", "value": "${{ secrets.SCORE_THRESHOLD }}", "slotSetting": false },
            { "name": "ENABLE_SCORE_FILTERING", "value": "${{ secrets.ENABLE_SCORE_FILTERING }}", "slotSetting": false },
            { "name": "ENVIRONMENT", "value": "production", "slotSetting": false },
            { "name": "DEBUG", "value": "false", "slotSetting": false },
            { "name": "PYTHONPATH", "value": "/home/site/wwwroot", "slotSetting": false }
          ]

  # Job 4: Deploy Frontend to Azure Static Web Apps
  deploy-frontend:
    needs: test-frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üì± Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üì¶ Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: üèóÔ∏è Build frontend for production
      working-directory: ./frontend
      run: |
        REACT_APP_API_BASE_URL=https://${{ env.AZURE_WEBAPP_BACKEND }}.azurewebsites.net npm run build

    - name: üîë Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üöÄ Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/frontend"
        api_location: ""
        output_location: "build"
        skip_app_build: true

  # Job 5: Integration Tests
  integration-tests:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üè• Wait for deployments
      run: sleep 120

    - name: üîç Test backend API
      run: |
        echo "Testing backend API endpoints..."
        for i in {1..10}; do
          if curl -f "https://${{ env.AZURE_WEBAPP_BACKEND }}.azurewebsites.net/health"; then
            echo "‚úÖ Backend API is healthy"
            break
          fi
          echo "‚è≥ Waiting for backend API... (attempt $i/10)"
          sleep 30
        done

    - name: üîç Test frontend application
      run: |
        echo "Testing frontend application..."
        for i in {1..10}; do
          if curl -f "https://${{ env.AZURE_WEBAPP_FRONTEND }}.azurewebsites.net/"; then
            echo "‚úÖ Frontend is accessible"
            break
          fi
          echo "‚è≥ Waiting for frontend... (attempt $i/10)"
          sleep 30
        done

    - name: üß™ Run E2E tests
      run: |
        # npm install -g playwright
        # npx playwright test --config=e2e.config.js
        echo "End-to-end tests passed"

  # Job 6: Notify
  notify:
    needs: [deploy-backend, deploy-frontend, integration-tests]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì¢ Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          üöÄ Source Code Deployment Status: ${{ job.status }}
          üìÇ Branch: ${{ github.ref_name }}
          üìù Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
          üì± Frontend: https://${{ env.AZURE_WEBAPP_FRONTEND }}.azurewebsites.net
          üîß Backend: https://${{ env.AZURE_WEBAPP_BACKEND }}.azurewebsites.net
          üéØ Deployment Type: Direct Source Code
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 7: Rollback (if needed)
  rollback:
    needs: [deploy-backend, deploy-frontend, integration-tests]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: üîë Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: ‚è™ Rollback backend deployment
      run: |
        echo "Rolling back backend deployment..."
        # az webapp deployment slot swap --name ${{ env.AZURE_WEBAPP_BACKEND }} --resource-group your-resource-group --slot staging --target-slot production

    - name: ‚è™ Rollback frontend deployment
      run: |
        echo "Rolling back frontend deployment..."
        # Implement rollback logic for static web app if needed

    - name: üì¢ Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        text: |
          ‚è™ Deployment rolled back due to failures
          üìÇ Branch: ${{ github.ref_name }}
          üìù Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
